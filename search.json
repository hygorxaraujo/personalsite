[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, I’m Hygor!\nI am a Data Scientist working as a consultant in projects for different areas like retail, health care, supply chain, etc.\nI also have more than seven years of experience as a Systems Architect, Analyst and Software Engineer in the development of web-based and mobile applications.\nIn my Masters, I worked with research in the Machine Learning area, mainly in the development of a method related to semi-supervised learning.\nMy interest is mainly in working on solutions that need to employ the use of data, AI, and Machine Learning methods to deliver better or new capabilities for the users."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n2019 - Masters in Computer Science with focus on Computational Intelligence - Universidade Federal de Juiz de Fora (UFJF)\n2017 - Bachelor in Computer Science - UFJF"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hygorxaraujo",
    "section": "",
    "text": "Explaining the Fogg Behavior Model\n\n\n\n\n\n\n\npython\n\n\nmatplotlib\n\n\nproductivity\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2020\n\n\nHygor X. Araújo\n\n\n\n\n\n\n\n\nHow to check missing values in pandas\n\n\n\n\n\n\n\npython\n\n\npandas\n\n\nnumpy\n\n\n\n\n\n\n\n\n\n\n\nJun 30, 2018\n\n\nHygor X. Araújo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2020-03-08-explaining-the-fogg-behavior-model.html",
    "href": "posts/2020-03-08-explaining-the-fogg-behavior-model.html",
    "title": "Explaining the Fogg behavior model",
    "section": "",
    "text": "In this post, I would like to explain the Fogg Behavior Model, created by Brian Jeffrey Fogg (B. J. Fogg).\nAccording to B. J. Fogg’s research, Behavior (\\(B\\)) happens at the intersection of three things: our Motivation (\\(M\\)), our Ability (\\(A\\)), and the Prompt (\\(P\\)) to the behavior.\n\\(B = MAP\\)\nWe can visualize the relationship between motivation, ability and the prompt in a two-dimensional graphic.\nI plotted the graphic below using Python and the NumPy and Matplotlib packages. I kept the code for anyone who is interested in how to do it.\nLooking at the graphic we can see that if there is a prompt for a behavior, but it is something too hard to do or if the motivation is low, the behavior will fail.\nOn the contrary, if the behavior is easy to do and we have the motivation when the prompt surges the behavior will be a success!\nThinking in the process of building new habits, we could use this model as a guide on how to develop a new one. After choosing the right behavior, make sure you have the right motivation for it and make it really easy to do it! In other words, you should make it as simple and small so that there is no chance you will not do it. In this way, each time you are successful with your behavior you are taking a step in making it a new habit.\nA similar conclusion can be thought in the process of stopping a bad habit, make it really hard to do, so that even when the prompt arises you will be less likely to do it.\nThis is the suggested template by B. J. Fogg to create a new behavior: > After I …, I will … . Then, I celebrate!\nThe celebration is an important step for you to connect the behavior with something positive that should be repeated.\nIf you think the behavior you tried to create is not working, try this troubleshoot method: 1. Check prompt 2. Check ability 3. Check motivation\nAnd keep trying out and learning more about yourself, one small step at a time."
  },
  {
    "objectID": "posts/2020-03-08-explaining-the-fogg-behavior-model.html#references",
    "href": "posts/2020-03-08-explaining-the-fogg-behavior-model.html#references",
    "title": "Explaining the Fogg behavior model",
    "section": "References",
    "text": "References\n\nBook: Tiny Habits: The Small Changes That Change Everything (English Edition)\nSite: B.J. Fogg\nSite: Tiny Habits"
  },
  {
    "objectID": "posts/2018-06-30-pandas-check-nan.html",
    "href": "posts/2018-06-30-pandas-check-nan.html",
    "title": "How to check missing values in pandas",
    "section": "",
    "text": "In this article I would like to describe how to find NaN values in a pandas DataFrame. This kind of operation can be very useful given that is common to find datasets with missing or incorrect data values.\nI will be using the numpy package to generate some data with NaN values.\n\nImport necessary packages\n\nimport pandas as pd\nimport numpy as np\nimport platform\n\n\nprint(f'Python version: {platform.python_version()} ({platform.python_implementation()})')\nprint(f'Pandas version: {pd.__version__}')\nprint(f'Numpy version: {np.__version__}')\n\nPython version: 3.10.7 (CPython)\nPandas version: 1.5.1\nNumpy version: 1.23.4\n\n\n\n\nGenerate data with NaN values\n\nnum_nan = 25 # number of NaN values wanted in the generated data\nnp.random.seed(6765431)  # set a seed for reproducibility\nA = np.random.randn(10, 10)\nprint(A)\n\n[[-1.56132314 -0.16954058 -0.17845422 -1.33689111 -0.19185078 -1.18617765\n   0.44499302 -0.61209568  0.31170935  1.4127548 ]\n [ 0.85330488  0.68517546 -1.10140989  0.84918019  0.72802961 -0.35161197\n   0.73519152  1.13145412  0.53231247  0.78103143]\n [-0.81614324  0.15906898  0.49940119 -0.09319255 -1.07837721 -0.76053341\n   0.73622083 -0.45518154 -0.69194032  1.02550409]\n [-1.96339975  0.07593331 -0.16798377 -1.20398958  0.88333656  1.17908422\n   0.26324698 -2.65442248 -0.31583796 -0.16065732]\n [-1.24321376 -0.89816898  0.02824671  0.15304093  0.56505667 -0.78115883\n   0.74504467  1.14025258 -0.04518221 -0.83908358]\n [ 1.00967019  0.84240102  1.15043436 -0.40120489  0.00664105 -1.23247563\n   0.64738343  1.66096762 -0.92556683  0.47575796]\n [ 0.96516278  1.11158059 -0.82155143  0.88900313  2.16943761 -2.05250161\n   2.40156233  0.92453867 -0.24437783 -2.91029265]\n [-0.86492662  0.82443151 -0.48246862 -1.05183143 -1.15272524 -0.77170733\n   0.07177233  1.02820181 -2.08947076  0.89859677]\n [-0.07263982 -0.56840867  1.30910275 -0.52846822  0.06019191 -0.61000727\n   0.40782356 -0.36124333 -1.54522486 -0.07891861]\n [-1.96361682 -1.06315325 -0.45582138 -0.74566868  1.27579529 -2.46306005\n   0.57022673 -0.02793746  0.78652775  1.27690195]]\n\n\n\n# Set random values to nan\nA.ravel()[np.random.choice(A.size, num_nan, replace=False)] = np.nan\nprint(A)\n\n[[-1.56132314 -0.16954058 -0.17845422 -1.33689111 -0.19185078 -1.18617765\n          nan -0.61209568  0.31170935  1.4127548 ]\n [ 0.85330488  0.68517546         nan  0.84918019         nan -0.35161197\n   0.73519152         nan  0.53231247  0.78103143]\n [-0.81614324  0.15906898  0.49940119         nan -1.07837721 -0.76053341\n   0.73622083         nan -0.69194032  1.02550409]\n [-1.96339975  0.07593331         nan -1.20398958  0.88333656         nan\n   0.26324698         nan -0.31583796 -0.16065732]\n [-1.24321376 -0.89816898  0.02824671  0.15304093  0.56505667 -0.78115883\n   0.74504467  1.14025258 -0.04518221 -0.83908358]\n [ 1.00967019  0.84240102         nan -0.40120489  0.00664105         nan\n   0.64738343  1.66096762 -0.92556683  0.47575796]\n [ 0.96516278         nan -0.82155143  0.88900313  2.16943761         nan\n   2.40156233         nan -0.24437783         nan]\n [-0.86492662  0.82443151 -0.48246862 -1.05183143 -1.15272524 -0.77170733\n   0.07177233  1.02820181 -2.08947076         nan]\n [-0.07263982         nan  1.30910275 -0.52846822  0.06019191 -0.61000727\n   0.40782356 -0.36124333         nan         nan]\n [        nan         nan         nan         nan  1.27579529 -2.46306005\n          nan         nan  0.78652775  1.27690195]]\n\n\n\n# Create a DataFrame from the generated data\ndf = pd.DataFrame(A)\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n  \n  \n    \n      0\n      -1.561323\n      -0.169541\n      -0.178454\n      -1.336891\n      -0.191851\n      -1.186178\n      NaN\n      -0.612096\n      0.311709\n      1.412755\n    \n    \n      1\n      0.853305\n      0.685175\n      NaN\n      0.849180\n      NaN\n      -0.351612\n      0.735192\n      NaN\n      0.532312\n      0.781031\n    \n    \n      2\n      -0.816143\n      0.159069\n      0.499401\n      NaN\n      -1.078377\n      -0.760533\n      0.736221\n      NaN\n      -0.691940\n      1.025504\n    \n    \n      3\n      -1.963400\n      0.075933\n      NaN\n      -1.203990\n      0.883337\n      NaN\n      0.263247\n      NaN\n      -0.315838\n      -0.160657\n    \n    \n      4\n      -1.243214\n      -0.898169\n      0.028247\n      0.153041\n      0.565057\n      -0.781159\n      0.745045\n      1.140253\n      -0.045182\n      -0.839084\n    \n    \n      5\n      1.009670\n      0.842401\n      NaN\n      -0.401205\n      0.006641\n      NaN\n      0.647383\n      1.660968\n      -0.925567\n      0.475758\n    \n    \n      6\n      0.965163\n      NaN\n      -0.821551\n      0.889003\n      2.169438\n      NaN\n      2.401562\n      NaN\n      -0.244378\n      NaN\n    \n    \n      7\n      -0.864927\n      0.824432\n      -0.482469\n      -1.051831\n      -1.152725\n      -0.771707\n      0.071772\n      1.028202\n      -2.089471\n      NaN\n    \n    \n      8\n      -0.072640\n      NaN\n      1.309103\n      -0.528468\n      0.060192\n      -0.610007\n      0.407824\n      -0.361243\n      NaN\n      NaN\n    \n    \n      9\n      NaN\n      NaN\n      NaN\n      NaN\n      1.275795\n      -2.463060\n      NaN\n      NaN\n      0.786528\n      1.276902\n    \n  \n\n\n\n\n\n\nCheck for NaN values\nNow that we have some data to operate on let’s see the different ways we can check for missing values.\nThere are two methods of the DataFrame object that can be used: DataFrame#isna() and DataFrame#isnull(). But if you check the source code it seems that isnull() is only an alias for the isna() method. To keep it simple I will only use the isna() method as we would get the same result using isnull().\n\ndf.isna()\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n  \n  \n    \n      0\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      False\n      False\n      False\n    \n    \n      1\n      False\n      False\n      True\n      False\n      True\n      False\n      False\n      True\n      False\n      False\n    \n    \n      2\n      False\n      False\n      False\n      True\n      False\n      False\n      False\n      True\n      False\n      False\n    \n    \n      3\n      False\n      False\n      True\n      False\n      False\n      True\n      False\n      True\n      False\n      False\n    \n    \n      4\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n    \n    \n      5\n      False\n      False\n      True\n      False\n      False\n      True\n      False\n      False\n      False\n      False\n    \n    \n      6\n      False\n      True\n      False\n      False\n      False\n      True\n      False\n      True\n      False\n      True\n    \n    \n      7\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n    \n    \n      8\n      False\n      True\n      False\n      False\n      False\n      False\n      False\n      False\n      True\n      True\n    \n    \n      9\n      True\n      True\n      True\n      True\n      False\n      False\n      True\n      True\n      False\n      False\n    \n  \n\n\n\n\nAs it can be seen above when we use the isna() method it returns a DataFrame with boolean values, where True indicates NaN values and False otherwise.\nIf we wanted to know how many missing values there are on each row or column we could use the DataFrame#sum() method:\n\ndf.isna().sum(axis='rows')  # 'rows' or 0\n\n0    1\n1    3\n2    4\n3    2\n4    1\n5    3\n6    2\n7    5\n8    1\n9    3\ndtype: int64\n\n\n\ndf.isna().sum(axis='columns')  # 'columns' or 1\n\n0    1\n1    3\n2    2\n3    3\n4    0\n5    2\n6    4\n7    1\n8    3\n9    6\ndtype: int64\n\n\nTo simply know the total number of missing values we can call sum() again:\n\ndf.isna().sum().sum()\n\n25\n\n\nIf we simply wanna know if there is any missing value with no care for the quantity we can simply use the any() method:\n\ndf.isna().any()  # can also receive axis='rows' or 'columns'\n\n0    True\n1    True\n2    True\n3    True\n4    True\n5    True\n6    True\n7    True\n8    True\n9    True\ndtype: bool\n\n\nCalling it again we have a single boolean output:\n\ndf.isna().any().any()\n\nTrue\n\n\nBesides the isna() method we also have the notna() method which is its boolean inverse. Applying it we can get the number of values that are not missing or simply if all values are not missing (but using the all() method instead of any()).\n\nprint(df.notna().sum().sum())  # not missing\nprint(df.notna().all().all())\n\n75\nFalse\n\n\nNote 1: in the examples, it was used the DataFrame methods to check for missing values, but the pandas package has its own functions with the same purpose that can be applied to other objects. Example:\n\nprint(pd.isna([1, 2, np.nan]))\nprint(pd.notna([1, 2, np.nan]))\n\n[False False  True]\n[ True  True False]\n\n\nNote 2: the methods applied here on DataFrame objects are also available for Series and Index objects.\n\n\nTime comparison\nComparing the time taken by the two methods we can see that using any() is faster but sum() will give us the additional information about how many missing values there are.\n\n%timeit df.isna().any().any()\n\n274 µs ± 3.76 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\n%timeit df.isna().sum().sum()\n\n254 µs ± 1.15 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\n\nDealing with missing values\nTwo easy ways to deal with missing values are removing them or filling them with some value. These can be achieved with the dropna() and fillna() methods.\nThe dropna() method will return a DataFrame without the rows and columns containing missing values.\n\ndf.dropna()\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n  \n  \n    \n      4\n      -1.243214\n      -0.898169\n      0.028247\n      0.153041\n      0.565057\n      -0.781159\n      0.745045\n      1.140253\n      -0.045182\n      -0.839084\n    \n  \n\n\n\n\nThe fillna() method will return a DataFrame with the missing values filled with a specified value.\n\ndf.fillna(value=5)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n    \n  \n  \n    \n      0\n      -1.561323\n      -0.169541\n      -0.178454\n      -1.336891\n      -0.191851\n      -1.186178\n      5.000000\n      -0.612096\n      0.311709\n      1.412755\n    \n    \n      1\n      0.853305\n      0.685175\n      5.000000\n      0.849180\n      5.000000\n      -0.351612\n      0.735192\n      5.000000\n      0.532312\n      0.781031\n    \n    \n      2\n      -0.816143\n      0.159069\n      0.499401\n      5.000000\n      -1.078377\n      -0.760533\n      0.736221\n      5.000000\n      -0.691940\n      1.025504\n    \n    \n      3\n      -1.963400\n      0.075933\n      5.000000\n      -1.203990\n      0.883337\n      5.000000\n      0.263247\n      5.000000\n      -0.315838\n      -0.160657\n    \n    \n      4\n      -1.243214\n      -0.898169\n      0.028247\n      0.153041\n      0.565057\n      -0.781159\n      0.745045\n      1.140253\n      -0.045182\n      -0.839084\n    \n    \n      5\n      1.009670\n      0.842401\n      5.000000\n      -0.401205\n      0.006641\n      5.000000\n      0.647383\n      1.660968\n      -0.925567\n      0.475758\n    \n    \n      6\n      0.965163\n      5.000000\n      -0.821551\n      0.889003\n      2.169438\n      5.000000\n      2.401562\n      5.000000\n      -0.244378\n      5.000000\n    \n    \n      7\n      -0.864927\n      0.824432\n      -0.482469\n      -1.051831\n      -1.152725\n      -0.771707\n      0.071772\n      1.028202\n      -2.089471\n      5.000000\n    \n    \n      8\n      -0.072640\n      5.000000\n      1.309103\n      -0.528468\n      0.060192\n      -0.610007\n      0.407824\n      -0.361243\n      5.000000\n      5.000000\n    \n    \n      9\n      5.000000\n      5.000000\n      5.000000\n      5.000000\n      1.275795\n      -2.463060\n      5.000000\n      5.000000\n      0.786528\n      1.276902\n    \n  \n\n\n\n\n\n\nReferences:\n\nCreate sample numpy array with randomly placed NaNs (StackOverflow)\nHow to check if any value is NaN in a Pandas DataFrame (StackOverflow)\npandas.isnull\npandas.isna\npandas.notna\npandas.DataFrame.dropna\npandas.DataFrame.fillna"
  }
]